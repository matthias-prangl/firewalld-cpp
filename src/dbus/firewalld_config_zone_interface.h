/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp firewalld-config-zone.xml -p firewalld_config_zone_interface -i generictypes.h -V
 *
 * qdbusxml2cpp is Copyright (C) 2023 The Qt Company Ltd and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FIREWALLD_CONFIG_ZONE_INTERFACE_H
#define FIREWALLD_CONFIG_ZONE_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generictypes.h"

/*
 * Proxy class for interface org.fedoraproject.FirewallD1.config.zone
 */
class OrgFedoraprojectFirewallD1ConfigZoneInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fedoraproject.FirewallD1.config.zone"; }

public:
    OrgFedoraprojectFirewallD1ConfigZoneInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFedoraprojectFirewallD1ConfigZoneInterface();

    Q_PROPERTY(bool builtin READ builtin)
    inline bool builtin() const
    { return qvariant_cast< bool >(property("builtin")); }

    Q_PROPERTY(bool default READ default)
    inline bool default() const
    { return qvariant_cast< bool >(property("default")); }

    Q_PROPERTY(QString filename READ filename)
    inline QString filename() const
    { return qvariant_cast< QString >(property("filename")); }

    Q_PROPERTY(QString name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("name")); }

    Q_PROPERTY(QString path READ path)
    inline QString path() const
    { return qvariant_cast< QString >(property("path")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addForwardPort(const QString &port, const QString &protocol, const QString &toport, const QString &toaddr)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol) << QVariant::fromValue(toport) << QVariant::fromValue(toaddr);
        return asyncCallWithArgumentList(QStringLiteral("addForwardPort"), argumentList);
    }

    inline QDBusPendingReply<> addIcmpBlock(const QString &icmptype)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(icmptype);
        return asyncCallWithArgumentList(QStringLiteral("addIcmpBlock"), argumentList);
    }

    inline QDBusPendingReply<> addIcmpBlockInversion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("addIcmpBlockInversion"), argumentList);
    }

    inline QDBusPendingReply<> addInterface(const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("addInterface"), argumentList);
    }

    inline QDBusPendingReply<> addMasquerade()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("addMasquerade"), argumentList);
    }

    inline QDBusPendingReply<> addPort(const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("addPort"), argumentList);
    }

    inline QDBusPendingReply<> addProtocol(const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("addProtocol"), argumentList);
    }

    inline QDBusPendingReply<> addRichRule(const QString &rule)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(rule);
        return asyncCallWithArgumentList(QStringLiteral("addRichRule"), argumentList);
    }

    inline QDBusPendingReply<> addService(const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QStringLiteral("addService"), argumentList);
    }

    inline QDBusPendingReply<> addSource(const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("addSource"), argumentList);
    }

    inline QDBusPendingReply<> addSourcePort(const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("addSourcePort"), argumentList);
    }

    inline QDBusPendingReply<QString> getDescription()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getDescription"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> getForwardPorts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getForwardPorts"), argumentList);
    }

    inline QDBusPendingReply<bool> getIcmpBlockInversion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getIcmpBlockInversion"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getIcmpBlocks()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getIcmpBlocks"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getInterfaces()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getInterfaces"), argumentList);
    }

    inline QDBusPendingReply<bool> getMasquerade()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getMasquerade"), argumentList);
    }

    inline QDBusPendingReply<FWPortList> getPorts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getPorts"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getProtocols()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getProtocols"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getRichRules()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getRichRules"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getServices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getServices"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> getSettings2()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getSettings2"), argumentList);
    }

    inline QDBusPendingReply<QString> getShort()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getShort"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> getSourcePorts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getSourcePorts"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getSources()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getSources"), argumentList);
    }

    inline QDBusPendingReply<QString> getTarget()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getTarget"), argumentList);
    }

    inline QDBusPendingReply<QString> getVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getVersion"), argumentList);
    }

    inline QDBusPendingReply<> loadDefaults()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("loadDefaults"), argumentList);
    }

    inline QDBusPendingReply<bool> queryForwardPort(const QString &port, const QString &protocol, const QString &toport, const QString &toaddr)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol) << QVariant::fromValue(toport) << QVariant::fromValue(toaddr);
        return asyncCallWithArgumentList(QStringLiteral("queryForwardPort"), argumentList);
    }

    inline QDBusPendingReply<bool> queryIcmpBlock(const QString &icmptype)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(icmptype);
        return asyncCallWithArgumentList(QStringLiteral("queryIcmpBlock"), argumentList);
    }

    inline QDBusPendingReply<bool> queryIcmpBlockInversion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("queryIcmpBlockInversion"), argumentList);
    }

    inline QDBusPendingReply<bool> queryInterface(const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("queryInterface"), argumentList);
    }

    inline QDBusPendingReply<bool> queryMasquerade()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("queryMasquerade"), argumentList);
    }

    inline QDBusPendingReply<bool> queryPort(const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("queryPort"), argumentList);
    }

    inline QDBusPendingReply<bool> queryProtocol(const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("queryProtocol"), argumentList);
    }

    inline QDBusPendingReply<bool> queryRichRule(const QString &rule)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(rule);
        return asyncCallWithArgumentList(QStringLiteral("queryRichRule"), argumentList);
    }

    inline QDBusPendingReply<bool> queryService(const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QStringLiteral("queryService"), argumentList);
    }

    inline QDBusPendingReply<bool> querySource(const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("querySource"), argumentList);
    }

    inline QDBusPendingReply<bool> querySourcePort(const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("querySourcePort"), argumentList);
    }

    inline QDBusPendingReply<> remove()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("remove"), argumentList);
    }

    inline QDBusPendingReply<> removeForwardPort(const QString &port, const QString &protocol, const QString &toport, const QString &toaddr)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol) << QVariant::fromValue(toport) << QVariant::fromValue(toaddr);
        return asyncCallWithArgumentList(QStringLiteral("removeForwardPort"), argumentList);
    }

    inline QDBusPendingReply<> removeIcmpBlock(const QString &icmptype)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(icmptype);
        return asyncCallWithArgumentList(QStringLiteral("removeIcmpBlock"), argumentList);
    }

    inline QDBusPendingReply<> removeIcmpBlockInversion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("removeIcmpBlockInversion"), argumentList);
    }

    inline QDBusPendingReply<> removeInterface(const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("removeInterface"), argumentList);
    }

    inline QDBusPendingReply<> removeMasquerade()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("removeMasquerade"), argumentList);
    }

    inline QDBusPendingReply<> removePort(const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("removePort"), argumentList);
    }

    inline QDBusPendingReply<> removeProtocol(const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("removeProtocol"), argumentList);
    }

    inline QDBusPendingReply<> removeRichRule(const QString &rule)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(rule);
        return asyncCallWithArgumentList(QStringLiteral("removeRichRule"), argumentList);
    }

    inline QDBusPendingReply<> removeService(const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QStringLiteral("removeService"), argumentList);
    }

    inline QDBusPendingReply<> removeSource(const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("removeSource"), argumentList);
    }

    inline QDBusPendingReply<> removeSourcePort(const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("removeSourcePort"), argumentList);
    }

    inline QDBusPendingReply<> rename(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("rename"), argumentList);
    }

    inline QDBusPendingReply<> setDescription(const QString &description)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(description);
        return asyncCallWithArgumentList(QStringLiteral("setDescription"), argumentList);
    }

    inline QDBusPendingReply<> setForwardPorts(const QVariantList &ports)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ports);
        return asyncCallWithArgumentList(QStringLiteral("setForwardPorts"), argumentList);
    }

    inline QDBusPendingReply<> setIcmpBlockInversion(bool flag)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flag);
        return asyncCallWithArgumentList(QStringLiteral("setIcmpBlockInversion"), argumentList);
    }

    inline QDBusPendingReply<> setIcmpBlocks(const QStringList &icmptypes)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(icmptypes);
        return asyncCallWithArgumentList(QStringLiteral("setIcmpBlocks"), argumentList);
    }

    inline QDBusPendingReply<> setInterfaces(const QStringList &interfaces)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interfaces);
        return asyncCallWithArgumentList(QStringLiteral("setInterfaces"), argumentList);
    }

    inline QDBusPendingReply<> setMasquerade(bool masquerade)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(masquerade);
        return asyncCallWithArgumentList(QStringLiteral("setMasquerade"), argumentList);
    }

    inline QDBusPendingReply<> setPorts(FWPortList ports)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ports);
        return asyncCallWithArgumentList(QStringLiteral("setPorts"), argumentList);
    }

    inline QDBusPendingReply<> setProtocols(const QStringList &protocols)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(protocols);
        return asyncCallWithArgumentList(QStringLiteral("setProtocols"), argumentList);
    }

    inline QDBusPendingReply<> setRichRules(const QStringList &rules)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(rules);
        return asyncCallWithArgumentList(QStringLiteral("setRichRules"), argumentList);
    }

    inline QDBusPendingReply<> setServices(const QStringList &services)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(services);
        return asyncCallWithArgumentList(QStringLiteral("setServices"), argumentList);
    }

    inline QDBusPendingReply<> setShort(const QString &short)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(short);
        return asyncCallWithArgumentList(QStringLiteral("setShort"), argumentList);
    }

    inline QDBusPendingReply<> setSourcePorts(const QVariantList &ports)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ports);
        return asyncCallWithArgumentList(QStringLiteral("setSourcePorts"), argumentList);
    }

    inline QDBusPendingReply<> setSources(const QStringList &sources)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sources);
        return asyncCallWithArgumentList(QStringLiteral("setSources"), argumentList);
    }

    inline QDBusPendingReply<> setTarget(const QString &target)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(target);
        return asyncCallWithArgumentList(QStringLiteral("setTarget"), argumentList);
    }

    inline QDBusPendingReply<> setVersion(const QString &version)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(version);
        return asyncCallWithArgumentList(QStringLiteral("setVersion"), argumentList);
    }

    inline QDBusPendingReply<> update2(const QVariantMap &settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("update2"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Removed(const QString &name);
    void Renamed(const QString &name);
    void Updated(const QString &name);
};

namespace org {
  namespace fedoraproject {
    namespace FirewallD1 {
      namespace config {
        using zone = ::OrgFedoraprojectFirewallD1ConfigZoneInterface;
      }
    }
  }
}
#endif
