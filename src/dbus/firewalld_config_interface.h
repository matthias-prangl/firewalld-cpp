/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp firewalld-config.xml -p firewalld_config_interface -i generictypes.h -V
 *
 * qdbusxml2cpp is Copyright (C) 2023 The Qt Company Ltd and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FIREWALLD_CONFIG_INTERFACE_H
#define FIREWALLD_CONFIG_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generictypes.h"

/*
 * Proxy class for interface org.fedoraproject.FirewallD1.config
 */
class OrgFedoraprojectFirewallD1ConfigInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fedoraproject.FirewallD1.config"; }

public:
    OrgFedoraprojectFirewallD1ConfigInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFedoraprojectFirewallD1ConfigInterface();

    Q_PROPERTY(QString CleanupModulesOnExit READ cleanupModulesOnExit WRITE setCleanupModulesOnExit)
    inline QString cleanupModulesOnExit() const
    { return qvariant_cast< QString >(property("CleanupModulesOnExit")); }
    inline void setCleanupModulesOnExit(const QString &value)
    { setProperty("CleanupModulesOnExit", QVariant::fromValue(value)); }

    Q_PROPERTY(QString CleanupOnExit READ cleanupOnExit WRITE setCleanupOnExit)
    inline QString cleanupOnExit() const
    { return qvariant_cast< QString >(property("CleanupOnExit")); }
    inline void setCleanupOnExit(const QString &value)
    { setProperty("CleanupOnExit", QVariant::fromValue(value)); }

    Q_PROPERTY(QString DefaultZone READ defaultZone)
    inline QString defaultZone() const
    { return qvariant_cast< QString >(property("DefaultZone")); }

    Q_PROPERTY(QString FirewallBackend READ firewallBackend WRITE setFirewallBackend)
    inline QString firewallBackend() const
    { return qvariant_cast< QString >(property("FirewallBackend")); }
    inline void setFirewallBackend(const QString &value)
    { setProperty("FirewallBackend", QVariant::fromValue(value)); }

    Q_PROPERTY(QString FlushAllOnReload READ flushAllOnReload WRITE setFlushAllOnReload)
    inline QString flushAllOnReload() const
    { return qvariant_cast< QString >(property("FlushAllOnReload")); }
    inline void setFlushAllOnReload(const QString &value)
    { setProperty("FlushAllOnReload", QVariant::fromValue(value)); }

    Q_PROPERTY(QString IPv6_rpfilter READ iPv6_rpfilter WRITE setIPv6_rpfilter)
    inline QString iPv6_rpfilter() const
    { return qvariant_cast< QString >(property("IPv6_rpfilter")); }
    inline void setIPv6_rpfilter(const QString &value)
    { setProperty("IPv6_rpfilter", QVariant::fromValue(value)); }

    Q_PROPERTY(QString IndividualCalls READ individualCalls WRITE setIndividualCalls)
    inline QString individualCalls() const
    { return qvariant_cast< QString >(property("IndividualCalls")); }
    inline void setIndividualCalls(const QString &value)
    { setProperty("IndividualCalls", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Lockdown READ lockdown WRITE setLockdown)
    inline QString lockdown() const
    { return qvariant_cast< QString >(property("Lockdown")); }
    inline void setLockdown(const QString &value)
    { setProperty("Lockdown", QVariant::fromValue(value)); }

    Q_PROPERTY(QString LogDenied READ logDenied WRITE setLogDenied)
    inline QString logDenied() const
    { return qvariant_cast< QString >(property("LogDenied")); }
    inline void setLogDenied(const QString &value)
    { setProperty("LogDenied", QVariant::fromValue(value)); }

    Q_PROPERTY(QString NftablesCounters READ nftablesCounters WRITE setNftablesCounters)
    inline QString nftablesCounters() const
    { return qvariant_cast< QString >(property("NftablesCounters")); }
    inline void setNftablesCounters(const QString &value)
    { setProperty("NftablesCounters", QVariant::fromValue(value)); }

    Q_PROPERTY(QString NftablesFlowtable READ nftablesFlowtable WRITE setNftablesFlowtable)
    inline QString nftablesFlowtable() const
    { return qvariant_cast< QString >(property("NftablesFlowtable")); }
    inline void setNftablesFlowtable(const QString &value)
    { setProperty("NftablesFlowtable", QVariant::fromValue(value)); }

    Q_PROPERTY(QString RFC3964_IPv4 READ rFC3964_IPv4 WRITE setRFC3964_IPv4)
    inline QString rFC3964_IPv4() const
    { return qvariant_cast< QString >(property("RFC3964_IPv4")); }
    inline void setRFC3964_IPv4(const QString &value)
    { setProperty("RFC3964_IPv4", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> addIPSet(const QString &ipset, FWIPSetSettings settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipset) << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("addIPSet"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> addIcmpType(const QString &icmptype, FWIcmpTypeSettings settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(icmptype) << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("addIcmpType"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> addPolicy(const QString &policy, const QVariantMap &settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(policy) << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("addPolicy"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> addService2(const QString &service, const QVariantMap &settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service) << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("addService2"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> addZone2(const QString &zone, const QVariantMap &settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("addZone2"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getHelperByName(const QString &helper)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(helper);
        return asyncCallWithArgumentList(QStringLiteral("getHelperByName"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getHelperNames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getHelperNames"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getIPSetByName(const QString &ipset)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipset);
        return asyncCallWithArgumentList(QStringLiteral("getIPSetByName"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getIPSetNames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getIPSetNames"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getIcmpTypeByName(const QString &icmptype)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(icmptype);
        return asyncCallWithArgumentList(QStringLiteral("getIcmpTypeByName"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getIcmpTypeNames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getIcmpTypeNames"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getPolicyByName(const QString &policy)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(policy);
        return asyncCallWithArgumentList(QStringLiteral("getPolicyByName"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getPolicyNames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getPolicyNames"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getServiceByName(const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QStringLiteral("getServiceByName"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getServiceNames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getServiceNames"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getZoneByName(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getZoneByName"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getZoneNames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getZoneNames"), argumentList);
    }

    inline QDBusPendingReply<QString> getZoneOfInterface(const QString &iface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(iface);
        return asyncCallWithArgumentList(QStringLiteral("getZoneOfInterface"), argumentList);
    }

    inline QDBusPendingReply<QString> getZoneOfSource(const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("getZoneOfSource"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > listHelpers()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listHelpers"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > listIPSets()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listIPSets"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > listIcmpTypes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listIcmpTypes"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > listPolicies()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listPolicies"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > listServices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listServices"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > listZones()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listZones"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void HelperAdded(const QString &helper);
    void IPSetAdded(const QString &ipset);
    void IcmpTypeAdded(const QString &icmptype);
    void PolicyAdded(const QString &policy);
    void ServiceAdded(const QString &service);
    void ZoneAdded(const QString &zone);
};

/*
 * Proxy class for interface org.fedoraproject.FirewallD1.config.policies
 */
class OrgFedoraprojectFirewallD1ConfigPoliciesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fedoraproject.FirewallD1.config.policies"; }

public:
    OrgFedoraprojectFirewallD1ConfigPoliciesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFedoraprojectFirewallD1ConfigPoliciesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addLockdownWhitelistCommand(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(command);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistCommand"), argumentList);
    }

    inline QDBusPendingReply<> addLockdownWhitelistContext(const QString &context)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(context);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistContext"), argumentList);
    }

    inline QDBusPendingReply<> addLockdownWhitelistUid(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistUid"), argumentList);
    }

    inline QDBusPendingReply<> addLockdownWhitelistUser(const QString &user)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistUser"), argumentList);
    }

    inline QDBusPendingReply<FWLockdownWhiteList> getLockdownWhitelist()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelist"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getLockdownWhitelistCommands()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistCommands"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getLockdownWhitelistContexts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistContexts"), argumentList);
    }

    inline QDBusPendingReply<IntList> getLockdownWhitelistUids()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistUids"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getLockdownWhitelistUsers()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistUsers"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistCommand(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(command);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistCommand"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistContext(const QString &context)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(context);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistContext"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistUid(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistUid"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistUser(const QString &user)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistUser"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistCommand(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(command);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistCommand"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistContext(const QString &context)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(context);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistContext"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistUid(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistUid"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistUser(const QString &user)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistUser"), argumentList);
    }

    inline QDBusPendingReply<> setLockdownWhitelist(FWLockdownWhiteList settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("setLockdownWhitelist"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void LockdownWhitelistUpdated();
};

namespace org {
  namespace fedoraproject {
    namespace FirewallD1 {
      using configInterface = ::OrgFedoraprojectFirewallD1ConfigInterface;
      namespace config {
        using policies = ::OrgFedoraprojectFirewallD1ConfigPoliciesInterface;
      }
    }
  }
}
#endif
