
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__include_firewalld_config_icmptype_h__proxy__H__
#define __sdbuscpp__include_firewalld_config_icmptype_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace fedoraproject {
namespace FirewallD1 {
namespace config {

class icmptype_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.fedoraproject.FirewallD1.config.icmptype";

protected:
    icmptype_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("Updated").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onUpdated(name); });
        proxy_.uponSignal("Removed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRemoved(name); });
        proxy_.uponSignal("Renamed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRenamed(name); });
    }

    ~icmptype_proxy() = default;

    virtual void onUpdated(const std::string& name) = 0;
    virtual void onRemoved(const std::string& name) = 0;
    virtual void onRenamed(const std::string& name) = 0;

public:
    sdbus::Struct<std::string, std::string, std::string, std::vector<std::string>> getSettings()
    {
        sdbus::Struct<std::string, std::string, std::string, std::vector<std::string>> result;
        proxy_.callMethod("getSettings").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void update(const sdbus::Struct<std::string, std::string, std::string, std::vector<std::string>>& settings)
    {
        proxy_.callMethod("update").onInterface(INTERFACE_NAME).withArguments(settings);
    }

    void loadDefaults()
    {
        proxy_.callMethod("loadDefaults").onInterface(INTERFACE_NAME);
    }

    void remove()
    {
        proxy_.callMethod("remove").onInterface(INTERFACE_NAME);
    }

    void rename(const std::string& name)
    {
        proxy_.callMethod("rename").onInterface(INTERFACE_NAME).withArguments(name);
    }

    std::string getVersion()
    {
        std::string result;
        proxy_.callMethod("getVersion").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setVersion(const std::string& version)
    {
        proxy_.callMethod("setVersion").onInterface(INTERFACE_NAME).withArguments(version);
    }

    std::string getShort()
    {
        std::string result;
        proxy_.callMethod("getShort").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setShort(const std::string& short_)
    {
        proxy_.callMethod("setShort").onInterface(INTERFACE_NAME).withArguments(short_);
    }

    std::string getDescription()
    {
        std::string result;
        proxy_.callMethod("getDescription").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setDescription(const std::string& description)
    {
        proxy_.callMethod("setDescription").onInterface(INTERFACE_NAME).withArguments(description);
    }

    std::vector<std::string> getDestinations()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getDestinations").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setDestinations(const std::vector<std::string>& destinations)
    {
        proxy_.callMethod("setDestinations").onInterface(INTERFACE_NAME).withArguments(destinations);
    }

    void addDestination(const std::string& destination)
    {
        proxy_.callMethod("addDestination").onInterface(INTERFACE_NAME).withArguments(destination);
    }

    void removeDestination(const std::string& destination)
    {
        proxy_.callMethod("removeDestination").onInterface(INTERFACE_NAME).withArguments(destination);
    }

    bool queryDestination(const std::string& destination)
    {
        bool result;
        proxy_.callMethod("queryDestination").onInterface(INTERFACE_NAME).withArguments(destination).storeResultsTo(result);
        return result;
    }

public:
    std::string name()
    {
        return proxy_.getProperty("name").onInterface(INTERFACE_NAME);
    }

    std::string filename()
    {
        return proxy_.getProperty("filename").onInterface(INTERFACE_NAME);
    }

    std::string path()
    {
        return proxy_.getProperty("path").onInterface(INTERFACE_NAME);
    }

    bool default_()
    {
        return proxy_.getProperty("default").onInterface(INTERFACE_NAME);
    }

    bool builtin()
    {
        return proxy_.getProperty("builtin").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}}} // namespaces

#endif
