
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__include_firewalld_config_zone_h__proxy__H__
#define __sdbuscpp__include_firewalld_config_zone_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace fedoraproject {
namespace FirewallD1 {
namespace config {

class zone_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.fedoraproject.FirewallD1.config.zone";

protected:
    zone_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("Updated").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onUpdated(name); });
        proxy_.uponSignal("Removed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRemoved(name); });
        proxy_.uponSignal("Renamed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRenamed(name); });
    }

    ~zone_proxy() = default;

    virtual void onUpdated(const std::string& name) = 0;
    virtual void onRemoved(const std::string& name) = 0;
    virtual void onRenamed(const std::string& name) = 0;

public:
    sdbus::Struct<std::string, std::string, std::string, bool, std::string, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>, std::vector<std::string>, bool, std::vector<sdbus::Struct<std::string, std::string, std::string, std::string>>, std::vector<std::string>, std::vector<std::string>, std::vector<std::string>, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>, bool> getSettings()
    {
        sdbus::Struct<std::string, std::string, std::string, bool, std::string, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>, std::vector<std::string>, bool, std::vector<sdbus::Struct<std::string, std::string, std::string, std::string>>, std::vector<std::string>, std::vector<std::string>, std::vector<std::string>, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>, bool> result;
        proxy_.callMethod("getSettings").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::map<std::string, sdbus::Variant> getSettings2()
    {
        std::map<std::string, sdbus::Variant> result;
        proxy_.callMethod("getSettings2").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void update(const sdbus::Struct<std::string, std::string, std::string, bool, std::string, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>, std::vector<std::string>, bool, std::vector<sdbus::Struct<std::string, std::string, std::string, std::string>>, std::vector<std::string>, std::vector<std::string>, std::vector<std::string>, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>, bool>& settings)
    {
        proxy_.callMethod("update").onInterface(INTERFACE_NAME).withArguments(settings);
    }

    void update2(const std::map<std::string, sdbus::Variant>& settings)
    {
        proxy_.callMethod("update2").onInterface(INTERFACE_NAME).withArguments(settings);
    }

    void loadDefaults()
    {
        proxy_.callMethod("loadDefaults").onInterface(INTERFACE_NAME);
    }

    void remove()
    {
        proxy_.callMethod("remove").onInterface(INTERFACE_NAME);
    }

    void rename(const std::string& name)
    {
        proxy_.callMethod("rename").onInterface(INTERFACE_NAME).withArguments(name);
    }

    std::string getVersion()
    {
        std::string result;
        proxy_.callMethod("getVersion").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setVersion(const std::string& version)
    {
        proxy_.callMethod("setVersion").onInterface(INTERFACE_NAME).withArguments(version);
    }

    std::string getShort()
    {
        std::string result;
        proxy_.callMethod("getShort").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setShort(const std::string& short_)
    {
        proxy_.callMethod("setShort").onInterface(INTERFACE_NAME).withArguments(short_);
    }

    std::string getDescription()
    {
        std::string result;
        proxy_.callMethod("getDescription").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setDescription(const std::string& description)
    {
        proxy_.callMethod("setDescription").onInterface(INTERFACE_NAME).withArguments(description);
    }

    std::string getTarget()
    {
        std::string result;
        proxy_.callMethod("getTarget").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setTarget(const std::string& target)
    {
        proxy_.callMethod("setTarget").onInterface(INTERFACE_NAME).withArguments(target);
    }

    std::vector<std::string> getServices()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getServices").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setServices(const std::vector<std::string>& services)
    {
        proxy_.callMethod("setServices").onInterface(INTERFACE_NAME).withArguments(services);
    }

    void addService(const std::string& service)
    {
        proxy_.callMethod("addService").onInterface(INTERFACE_NAME).withArguments(service);
    }

    void removeService(const std::string& service)
    {
        proxy_.callMethod("removeService").onInterface(INTERFACE_NAME).withArguments(service);
    }

    bool queryService(const std::string& service)
    {
        bool result;
        proxy_.callMethod("queryService").onInterface(INTERFACE_NAME).withArguments(service).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string>> getPorts()
    {
        std::vector<sdbus::Struct<std::string, std::string>> result;
        proxy_.callMethod("getPorts").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setPorts(const std::vector<sdbus::Struct<std::string, std::string>>& ports)
    {
        proxy_.callMethod("setPorts").onInterface(INTERFACE_NAME).withArguments(ports);
    }

    void addPort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("addPort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    void removePort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("removePort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    bool queryPort(const std::string& port, const std::string& protocol)
    {
        bool result;
        proxy_.callMethod("queryPort").onInterface(INTERFACE_NAME).withArguments(port, protocol).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getProtocols()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getProtocols").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setProtocols(const std::vector<std::string>& protocols)
    {
        proxy_.callMethod("setProtocols").onInterface(INTERFACE_NAME).withArguments(protocols);
    }

    void addProtocol(const std::string& protocol)
    {
        proxy_.callMethod("addProtocol").onInterface(INTERFACE_NAME).withArguments(protocol);
    }

    void removeProtocol(const std::string& protocol)
    {
        proxy_.callMethod("removeProtocol").onInterface(INTERFACE_NAME).withArguments(protocol);
    }

    bool queryProtocol(const std::string& protocol)
    {
        bool result;
        proxy_.callMethod("queryProtocol").onInterface(INTERFACE_NAME).withArguments(protocol).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string>> getSourcePorts()
    {
        std::vector<sdbus::Struct<std::string, std::string>> result;
        proxy_.callMethod("getSourcePorts").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setSourcePorts(const std::vector<sdbus::Struct<std::string, std::string>>& ports)
    {
        proxy_.callMethod("setSourcePorts").onInterface(INTERFACE_NAME).withArguments(ports);
    }

    void addSourcePort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("addSourcePort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    void removeSourcePort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("removeSourcePort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    bool querySourcePort(const std::string& port, const std::string& protocol)
    {
        bool result;
        proxy_.callMethod("querySourcePort").onInterface(INTERFACE_NAME).withArguments(port, protocol).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getIcmpBlocks()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getIcmpBlocks").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setIcmpBlocks(const std::vector<std::string>& icmptypes)
    {
        proxy_.callMethod("setIcmpBlocks").onInterface(INTERFACE_NAME).withArguments(icmptypes);
    }

    void addIcmpBlock(const std::string& icmptype)
    {
        proxy_.callMethod("addIcmpBlock").onInterface(INTERFACE_NAME).withArguments(icmptype);
    }

    void removeIcmpBlock(const std::string& icmptype)
    {
        proxy_.callMethod("removeIcmpBlock").onInterface(INTERFACE_NAME).withArguments(icmptype);
    }

    bool queryIcmpBlock(const std::string& icmptype)
    {
        bool result;
        proxy_.callMethod("queryIcmpBlock").onInterface(INTERFACE_NAME).withArguments(icmptype).storeResultsTo(result);
        return result;
    }

    bool getIcmpBlockInversion()
    {
        bool result;
        proxy_.callMethod("getIcmpBlockInversion").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setIcmpBlockInversion(const bool& flag)
    {
        proxy_.callMethod("setIcmpBlockInversion").onInterface(INTERFACE_NAME).withArguments(flag);
    }

    void addIcmpBlockInversion()
    {
        proxy_.callMethod("addIcmpBlockInversion").onInterface(INTERFACE_NAME);
    }

    void removeIcmpBlockInversion()
    {
        proxy_.callMethod("removeIcmpBlockInversion").onInterface(INTERFACE_NAME);
    }

    bool queryIcmpBlockInversion()
    {
        bool result;
        proxy_.callMethod("queryIcmpBlockInversion").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    bool getMasquerade()
    {
        bool result;
        proxy_.callMethod("getMasquerade").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setMasquerade(const bool& masquerade)
    {
        proxy_.callMethod("setMasquerade").onInterface(INTERFACE_NAME).withArguments(masquerade);
    }

    void addMasquerade()
    {
        proxy_.callMethod("addMasquerade").onInterface(INTERFACE_NAME);
    }

    void removeMasquerade()
    {
        proxy_.callMethod("removeMasquerade").onInterface(INTERFACE_NAME);
    }

    bool queryMasquerade()
    {
        bool result;
        proxy_.callMethod("queryMasquerade").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string, std::string>> getForwardPorts()
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string, std::string>> result;
        proxy_.callMethod("getForwardPorts").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setForwardPorts(const std::vector<sdbus::Struct<std::string, std::string, std::string, std::string>>& ports)
    {
        proxy_.callMethod("setForwardPorts").onInterface(INTERFACE_NAME).withArguments(ports);
    }

    void addForwardPort(const std::string& port, const std::string& protocol, const std::string& toport, const std::string& toaddr)
    {
        proxy_.callMethod("addForwardPort").onInterface(INTERFACE_NAME).withArguments(port, protocol, toport, toaddr);
    }

    void removeForwardPort(const std::string& port, const std::string& protocol, const std::string& toport, const std::string& toaddr)
    {
        proxy_.callMethod("removeForwardPort").onInterface(INTERFACE_NAME).withArguments(port, protocol, toport, toaddr);
    }

    bool queryForwardPort(const std::string& port, const std::string& protocol, const std::string& toport, const std::string& toaddr)
    {
        bool result;
        proxy_.callMethod("queryForwardPort").onInterface(INTERFACE_NAME).withArguments(port, protocol, toport, toaddr).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getInterfaces()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getInterfaces").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setInterfaces(const std::vector<std::string>& interfaces)
    {
        proxy_.callMethod("setInterfaces").onInterface(INTERFACE_NAME).withArguments(interfaces);
    }

    void addInterface(const std::string& interface)
    {
        proxy_.callMethod("addInterface").onInterface(INTERFACE_NAME).withArguments(interface);
    }

    void removeInterface(const std::string& interface)
    {
        proxy_.callMethod("removeInterface").onInterface(INTERFACE_NAME).withArguments(interface);
    }

    bool queryInterface(const std::string& interface)
    {
        bool result;
        proxy_.callMethod("queryInterface").onInterface(INTERFACE_NAME).withArguments(interface).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getSources()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getSources").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setSources(const std::vector<std::string>& sources)
    {
        proxy_.callMethod("setSources").onInterface(INTERFACE_NAME).withArguments(sources);
    }

    void addSource(const std::string& source)
    {
        proxy_.callMethod("addSource").onInterface(INTERFACE_NAME).withArguments(source);
    }

    void removeSource(const std::string& source)
    {
        proxy_.callMethod("removeSource").onInterface(INTERFACE_NAME).withArguments(source);
    }

    bool querySource(const std::string& source)
    {
        bool result;
        proxy_.callMethod("querySource").onInterface(INTERFACE_NAME).withArguments(source).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getRichRules()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getRichRules").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setRichRules(const std::vector<std::string>& rules)
    {
        proxy_.callMethod("setRichRules").onInterface(INTERFACE_NAME).withArguments(rules);
    }

    void addRichRule(const std::string& rule)
    {
        proxy_.callMethod("addRichRule").onInterface(INTERFACE_NAME).withArguments(rule);
    }

    void removeRichRule(const std::string& rule)
    {
        proxy_.callMethod("removeRichRule").onInterface(INTERFACE_NAME).withArguments(rule);
    }

    bool queryRichRule(const std::string& rule)
    {
        bool result;
        proxy_.callMethod("queryRichRule").onInterface(INTERFACE_NAME).withArguments(rule).storeResultsTo(result);
        return result;
    }

public:
    std::string name()
    {
        return proxy_.getProperty("name").onInterface(INTERFACE_NAME);
    }

    std::string filename()
    {
        return proxy_.getProperty("filename").onInterface(INTERFACE_NAME);
    }

    std::string path()
    {
        return proxy_.getProperty("path").onInterface(INTERFACE_NAME);
    }

    bool default_()
    {
        return proxy_.getProperty("default").onInterface(INTERFACE_NAME);
    }

    bool builtin()
    {
        return proxy_.getProperty("builtin").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}}} // namespaces

#endif
