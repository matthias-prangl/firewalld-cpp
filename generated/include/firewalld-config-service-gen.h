
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__include_firewalld_config_service_gen_h__proxy__H__
#define __sdbuscpp__include_firewalld_config_service_gen_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace fedoraproject {
namespace FirewallD1 {
namespace config {

class service_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.fedoraproject.FirewallD1.config.service";

protected:
    service_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("Updated").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onUpdated(name); });
        proxy_.uponSignal("Removed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRemoved(name); });
        proxy_.uponSignal("Renamed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRenamed(name); });
    }

    ~service_proxy() = default;

    virtual void onUpdated(const std::string& name) = 0;
    virtual void onRemoved(const std::string& name) = 0;
    virtual void onRenamed(const std::string& name) = 0;

public:
    sdbus::Struct<std::string, std::string, std::string, std::vector<sdbus::Struct<std::string, std::string>>, std::vector<std::string>, std::map<std::string, std::string>, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>> getSettings()
    {
        sdbus::Struct<std::string, std::string, std::string, std::vector<sdbus::Struct<std::string, std::string>>, std::vector<std::string>, std::map<std::string, std::string>, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>> result;
        proxy_.callMethod("getSettings").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::map<std::string, sdbus::Variant> getSettings2()
    {
        std::map<std::string, sdbus::Variant> result;
        proxy_.callMethod("getSettings2").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void update(const sdbus::Struct<std::string, std::string, std::string, std::vector<sdbus::Struct<std::string, std::string>>, std::vector<std::string>, std::map<std::string, std::string>, std::vector<std::string>, std::vector<sdbus::Struct<std::string, std::string>>>& settings)
    {
        proxy_.callMethod("update").onInterface(INTERFACE_NAME).withArguments(settings);
    }

    void update2(const std::map<std::string, sdbus::Variant>& settings)
    {
        proxy_.callMethod("update2").onInterface(INTERFACE_NAME).withArguments(settings);
    }

    void loadDefaults()
    {
        proxy_.callMethod("loadDefaults").onInterface(INTERFACE_NAME);
    }

    void remove()
    {
        proxy_.callMethod("remove").onInterface(INTERFACE_NAME);
    }

    void rename(const std::string& name)
    {
        proxy_.callMethod("rename").onInterface(INTERFACE_NAME).withArguments(name);
    }

    std::string getVersion()
    {
        std::string result;
        proxy_.callMethod("getVersion").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setVersion(const std::string& version)
    {
        proxy_.callMethod("setVersion").onInterface(INTERFACE_NAME).withArguments(version);
    }

    std::string getShort()
    {
        std::string result;
        proxy_.callMethod("getShort").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setShort(const std::string& short_)
    {
        proxy_.callMethod("setShort").onInterface(INTERFACE_NAME).withArguments(short_);
    }

    std::string getDescription()
    {
        std::string result;
        proxy_.callMethod("getDescription").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setDescription(const std::string& description)
    {
        proxy_.callMethod("setDescription").onInterface(INTERFACE_NAME).withArguments(description);
    }

    std::vector<sdbus::Struct<std::string, std::string>> getPorts()
    {
        std::vector<sdbus::Struct<std::string, std::string>> result;
        proxy_.callMethod("getPorts").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setPorts(const std::vector<sdbus::Struct<std::string, std::string>>& ports)
    {
        proxy_.callMethod("setPorts").onInterface(INTERFACE_NAME).withArguments(ports);
    }

    void addPort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("addPort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    void removePort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("removePort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    bool queryPort(const std::string& port, const std::string& protocol)
    {
        bool result;
        proxy_.callMethod("queryPort").onInterface(INTERFACE_NAME).withArguments(port, protocol).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getProtocols()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getProtocols").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setProtocols(const std::vector<std::string>& protocols)
    {
        proxy_.callMethod("setProtocols").onInterface(INTERFACE_NAME).withArguments(protocols);
    }

    void addProtocol(const std::string& protocol)
    {
        proxy_.callMethod("addProtocol").onInterface(INTERFACE_NAME).withArguments(protocol);
    }

    void removeProtocol(const std::string& protocol)
    {
        proxy_.callMethod("removeProtocol").onInterface(INTERFACE_NAME).withArguments(protocol);
    }

    bool queryProtocol(const std::string& protocol)
    {
        bool result;
        proxy_.callMethod("queryProtocol").onInterface(INTERFACE_NAME).withArguments(protocol).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string>> getSourcePorts()
    {
        std::vector<sdbus::Struct<std::string, std::string>> result;
        proxy_.callMethod("getSourcePorts").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setSourcePorts(const std::vector<sdbus::Struct<std::string, std::string>>& ports)
    {
        proxy_.callMethod("setSourcePorts").onInterface(INTERFACE_NAME).withArguments(ports);
    }

    void addSourcePort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("addSourcePort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    void removeSourcePort(const std::string& port, const std::string& protocol)
    {
        proxy_.callMethod("removeSourcePort").onInterface(INTERFACE_NAME).withArguments(port, protocol);
    }

    bool querySourcePort(const std::string& port, const std::string& protocol)
    {
        bool result;
        proxy_.callMethod("querySourcePort").onInterface(INTERFACE_NAME).withArguments(port, protocol).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getModules()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getModules").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setModules(const std::vector<std::string>& modules)
    {
        proxy_.callMethod("setModules").onInterface(INTERFACE_NAME).withArguments(modules);
    }

    void addModule(const std::string& module)
    {
        proxy_.callMethod("addModule").onInterface(INTERFACE_NAME).withArguments(module);
    }

    void removeModule(const std::string& module)
    {
        proxy_.callMethod("removeModule").onInterface(INTERFACE_NAME).withArguments(module);
    }

    bool queryModule(const std::string& module)
    {
        bool result;
        proxy_.callMethod("queryModule").onInterface(INTERFACE_NAME).withArguments(module).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getDestinations()
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getDestinations").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setDestinations(const std::map<std::string, std::string>& destinations)
    {
        proxy_.callMethod("setDestinations").onInterface(INTERFACE_NAME).withArguments(destinations);
    }

    std::string getDestination(const std::string& family)
    {
        std::string result;
        proxy_.callMethod("getDestination").onInterface(INTERFACE_NAME).withArguments(family).storeResultsTo(result);
        return result;
    }

    void setDestination(const std::string& family, const std::string& address)
    {
        proxy_.callMethod("setDestination").onInterface(INTERFACE_NAME).withArguments(family, address);
    }

    void removeDestination(const std::string& family)
    {
        proxy_.callMethod("removeDestination").onInterface(INTERFACE_NAME).withArguments(family);
    }

    bool queryDestination(const std::string& family, const std::string& address)
    {
        bool result;
        proxy_.callMethod("queryDestination").onInterface(INTERFACE_NAME).withArguments(family, address).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getIncludes()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getIncludes").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setIncludes(const std::vector<std::string>& includes)
    {
        proxy_.callMethod("setIncludes").onInterface(INTERFACE_NAME).withArguments(includes);
    }

    void addInclude(const std::string& include)
    {
        proxy_.callMethod("addInclude").onInterface(INTERFACE_NAME).withArguments(include);
    }

    void removeInclude(const std::string& include)
    {
        proxy_.callMethod("removeInclude").onInterface(INTERFACE_NAME).withArguments(include);
    }

    bool queryInclude(const std::string& include)
    {
        bool result;
        proxy_.callMethod("queryInclude").onInterface(INTERFACE_NAME).withArguments(include).storeResultsTo(result);
        return result;
    }

public:
    std::string name()
    {
        return proxy_.getProperty("name").onInterface(INTERFACE_NAME);
    }

    std::string filename()
    {
        return proxy_.getProperty("filename").onInterface(INTERFACE_NAME);
    }

    std::string path()
    {
        return proxy_.getProperty("path").onInterface(INTERFACE_NAME);
    }

    bool default_()
    {
        return proxy_.getProperty("default").onInterface(INTERFACE_NAME);
    }

    bool builtin()
    {
        return proxy_.getProperty("builtin").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}}} // namespaces

#endif
